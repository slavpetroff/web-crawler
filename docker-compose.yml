version: '3.8'

services:
  db:
    image: postgres:16  # or the database you're using
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: bitnami/rabbitmq:latest
    container_name: 'rabbitmq'
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 20s
      retries: 5
    env_file:
      - .env
    environment:
      RABBITMQ_USERNAME: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - "5672"
      - "15672"

  alembic:
    build:
        context: .
        dockerfile: ./deployment/development/Dockerfile
    command: alembic upgrade head || alembic stamp head
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
    depends_on:
      - db

  worker:
    build:
        context: .
        dockerfile: ./deployment/development/Dockerfile
    command: dramatiq app.tasks
    restart: on-failure
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  api:
    build:
        context: .
        dockerfile: ./deployment/development/Dockerfile
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}

volumes:
  db_data:
    driver: local